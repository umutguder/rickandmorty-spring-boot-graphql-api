type Query {

    # Get a specific character by ID
    character(id: Int): Character

    # Get the list of all characters
    characters(page: Int = 0, filter: CharacterFilter, size: Int = 20): Characters

    # Get a list of characters selected by ids
    charactersByIds( ids: [ID!]! ): [Character]

    # Get a specific locations by ID
    location(id: Int): Location

    # Get the list of all locations
    locations(page: Int = 0, filter: LocationFilter, size: Int = 20): Locations

    # Get a list of locations selected by ids
    locationsByIds( ids: [ID!]! ): [Location]

    # Get a specific episodes by ID
    episode(id: Int): Episode

    # Get the list of all episodes
    episodes(page: Int = 0, filter: EpisodeFilter, size: Int = 20): Episodes

    # Get a list of episodes selected by ids
    episodesByIds( ids: [ID!]! ): [Episode]
}

type Character {

    # The id of the character.
    id: ID!

    # The name of the character.
    name: String

    # The character's last known location
    location: Location

    # The id of the character.
    episode: Episode

    # Link to the character's image. All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.
    image: String

    # Time at which the character was created in the database.
    created: String
}

type Episode {

    # The id of the episode.
    id: ID!

    # The id of the episode.
    name: String

    # List of characters who have been seen in the episode.
    characters: [Character]

    # Time at which the episode was created in the database
    created: String
}

type Location {
    # The id of the location.
    id: ID!

    # The name of the location.
    name: String

    # List of characters who have been last seen in the location.
    residents: [Character]

    # Time at which the location was created in the database.
    created: String
}

type Characters{
    info: PageInfo
    results: [Character]
}

type Locations{
    info: PageInfo
    results: [Location]
}

type Episodes{
    info: PageInfo
    results: [Episode]
}

type PageInfo{
    count: Int
    pages: Int
    next: Int
    prev: Int
}

# Define character filter input
input CharacterFilter {
    name: String
}

# Define location filter input
input LocationFilter {
    name: String
}

# Define episode filter input
input EpisodeFilter {
    name: String
}